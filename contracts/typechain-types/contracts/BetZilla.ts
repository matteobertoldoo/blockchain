/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BetZilla {
  export type EventStruct = {
    id: BigNumberish;
    title: string;
    description: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    totalPool: BigNumberish;
    isActive: boolean;
    isResolved: boolean;
    winner: AddressLike;
  };

  export type EventStructOutput = [
    id: bigint,
    title: string,
    description: string,
    startTime: bigint,
    endTime: bigint,
    totalPool: bigint,
    isActive: boolean,
    isResolved: boolean,
    winner: string
  ] & {
    id: bigint;
    title: string;
    description: string;
    startTime: bigint;
    endTime: bigint;
    totalPool: bigint;
    isActive: boolean;
    isResolved: boolean;
    winner: string;
  };

  export type BetStruct = {
    id: BigNumberish;
    bettor: AddressLike;
    amount: BigNumberish;
    odds: BigNumberish;
    isActive: boolean;
    isWon: boolean;
    timestamp: BigNumberish;
  };

  export type BetStructOutput = [
    id: bigint,
    bettor: string,
    amount: bigint,
    odds: bigint,
    isActive: boolean,
    isWon: boolean,
    timestamp: bigint
  ] & {
    id: bigint;
    bettor: string;
    amount: bigint;
    odds: bigint;
    isActive: boolean;
    isWon: boolean;
    timestamp: bigint;
  };
}

export interface BetZillaInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "calculateOdds"
      | "createEvent"
      | "eventBets"
      | "events"
      | "getEvent"
      | "getEventBets"
      | "getUserBalance"
      | "owner"
      | "placeBet"
      | "platformFee"
      | "renounceOwnership"
      | "resolveEvent"
      | "setPlatformFee"
      | "transferOwnership"
      | "userBalances"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BetPlaced"
      | "BetWon"
      | "EventCreated"
      | "EventResolved"
      | "FeeCollected"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOdds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventBets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventBets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveEvent",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOdds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    betId: BigNumberish,
    bettor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    betId: bigint,
    bettor: string,
    amount: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    betId: bigint;
    bettor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BetWonEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    betId: BigNumberish,
    bettor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    betId: bigint,
    bettor: string,
    amount: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    betId: bigint;
    bettor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventCreatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    title: string,
    startTime: BigNumberish
  ];
  export type OutputTuple = [eventId: bigint, title: string, startTime: bigint];
  export interface OutputObject {
    eventId: bigint;
    title: string;
    startTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventResolvedEvent {
  export type InputTuple = [eventId: BigNumberish, winner: AddressLike];
  export type OutputTuple = [eventId: bigint, winner: string];
  export interface OutputObject {
    eventId: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeCollectedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BetZilla extends BaseContract {
  connect(runner?: ContractRunner | null): BetZilla;
  waitForDeployment(): Promise<this>;

  interface: BetZillaInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  calculateOdds: TypedContractMethod<
    [_eventId: BigNumberish],
    [bigint],
    "view"
  >;

  createEvent: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  eventBets: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, boolean, bigint] & {
        id: bigint;
        bettor: string;
        amount: bigint;
        odds: bigint;
        isActive: boolean;
        isWon: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        startTime: bigint;
        endTime: bigint;
        totalPool: bigint;
        isActive: boolean;
        isResolved: boolean;
        winner: string;
      }
    ],
    "view"
  >;

  getEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [BetZilla.EventStructOutput],
    "view"
  >;

  getEventBets: TypedContractMethod<
    [_eventId: BigNumberish],
    [BetZilla.BetStructOutput[]],
    "view"
  >;

  getUserBalance: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  placeBet: TypedContractMethod<[_eventId: BigNumberish], [void], "payable">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveEvent: TypedContractMethod<
    [_eventId: BigNumberish, _winner: AddressLike],
    [void],
    "nonpayable"
  >;

  setPlatformFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateOdds"
  ): TypedContractMethod<[_eventId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eventBets"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, boolean, bigint] & {
        id: bigint;
        bettor: string;
        amount: bigint;
        odds: bigint;
        isActive: boolean;
        isWon: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        startTime: bigint;
        endTime: bigint;
        totalPool: bigint;
        isActive: boolean;
        isResolved: boolean;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEvent"
  ): TypedContractMethod<
    [_eventId: BigNumberish],
    [BetZilla.EventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEventBets"
  ): TypedContractMethod<
    [_eventId: BigNumberish],
    [BetZilla.BetStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserBalance"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveEvent"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _winner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "BetWon"
  ): TypedContractEvent<
    BetWonEvent.InputTuple,
    BetWonEvent.OutputTuple,
    BetWonEvent.OutputObject
  >;
  getEvent(
    key: "EventCreated"
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EventResolved"
  ): TypedContractEvent<
    EventResolvedEvent.InputTuple,
    EventResolvedEvent.OutputTuple,
    EventResolvedEvent.OutputObject
  >;
  getEvent(
    key: "FeeCollected"
  ): TypedContractEvent<
    FeeCollectedEvent.InputTuple,
    FeeCollectedEvent.OutputTuple,
    FeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BetPlaced(uint256,uint256,address,uint256)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "BetWon(uint256,uint256,address,uint256)": TypedContractEvent<
      BetWonEvent.InputTuple,
      BetWonEvent.OutputTuple,
      BetWonEvent.OutputObject
    >;
    BetWon: TypedContractEvent<
      BetWonEvent.InputTuple,
      BetWonEvent.OutputTuple,
      BetWonEvent.OutputObject
    >;

    "EventCreated(uint256,string,uint256)": TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;

    "EventResolved(uint256,address)": TypedContractEvent<
      EventResolvedEvent.InputTuple,
      EventResolvedEvent.OutputTuple,
      EventResolvedEvent.OutputObject
    >;
    EventResolved: TypedContractEvent<
      EventResolvedEvent.InputTuple,
      EventResolvedEvent.OutputTuple,
      EventResolvedEvent.OutputObject
    >;

    "FeeCollected(uint256)": TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;
    FeeCollected: TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
